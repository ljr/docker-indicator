#!/usr/bin/env python3

import os
import signal

import docker
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk as gtk
from gi.repository import AppIndicator3 as appindicator


class DockerIndicator:

    APPINDICATOR_ID = 'docker-indicator'
    ICON = '/usr/share/icons/docker.svg'

    def __init__(self):
        self.client = docker.from_env()

        self.menu = gtk.Menu()

        self.indicator = appindicator.Indicator.new(
            DockerIndicator.APPINDICATOR_ID, 
            os.path.abspath(DockerIndicator.ICON), 
            appindicator.IndicatorCategory.SYSTEM_SERVICES)
        self.indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.indicator.set_menu(self.set_menu())


    def set_menu(self):
        for c in self.client.containers.list(all = True):
            label = c.name
            item = gtk.CheckMenuItem(label)
            item.set_active(c.status == 'running') 
            item.connect('activate', self.start_stop)
            self.menu.append(item)
        self.menu.show_all()
        return self.menu


    def start_stop(self, widget):
        container_name = widget.get_label()
        c = self.client.containers.get(container_name)
        if c.status == 'running':
            try:
                print('[stopped]: ', end = '')
                c.stop()
            except Exception:
                pass
        else:
            print('[started]: ', end = '')
            c.start()
        print('container', container_name)


    def run(self):
        gtk.main()


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    DockerIndicator().run()

